---
title: Queries and abbreviations
---

# Search Queries

```{python}
#| echo: false
#| output: asis

import ast
import glob
from pathlib import Path
import re
import sys
import pandas as pd
sys.path.append("ri-queries")
from working_with_queries import get_query, print_query, print_title

# Configuration constants
# --------------------------------------------------------------------------------------
# Define which queries to skip, include, or handle specially
SKIP_OG = ['ANIM', 'HUM', 'UT-BL', 'BLD-MENS', 'PL-GEN', 'PL-INS', 'SURG-REC', 'SURG-SD']
SKIP_CLINICAL = ['A-LM', 'A-MON', 'A-NM', 'A-REST', 'A-RO', 'A-RRR']
SKIP_TOPICS = ['QOL']
KEEP_GYNCANCERS = ['GYN-CER', 'GYN-END', 'GYN-GEN', 'GYN-OVA', 'GYN-VUL']
WITH_HUMAN_FILTER = ['ART', 'FERT']

# Helper functions
# --------------------------------------------------------------------------------------
def load_hierarchy_data():
    """Load the hierarchical structure of departments and subdivisions."""
    main_path = Path().resolve()
    hierarchy = pd.read_csv(main_path / 'ri-queries' / 'Keywords' / 'OG' / 'keywords_hierarchy.csv')
    departments = set(hierarchy['dep_long'].tolist())
    subdivisions = set(hierarchy['sub_long'].tolist())
    
    # Create mapping from departments to their subdivisions
    dept_to_subs = {}
    for department in sorted(departments):
        dept_to_subs[department] = set(
            hierarchy.loc[hierarchy['dep_long'] == department, 'sub_long'].tolist()
        )
    
    return main_path, hierarchy, departments, subdivisions, dept_to_subs

def initialize_file_structure(departments, hierarchy):
    """Initialize the data structure to hold files organized by department and subdivision."""
    files_by_dept = {}
    
    # Initialize structure for each department and subdivision
    for dept, sub in zip(hierarchy['dep_long'], hierarchy['sub_long']):
        if dept not in files_by_dept:
            files_by_dept[dept] = {}
        if sub not in files_by_dept[dept]:
            files_by_dept[dept][sub] = set()
    
    # Add special General/Filters entry
    files_by_dept['General'] = {}
    files_by_dept['General']['Filters'] = Path().resolve() / 'ri-queries' / 'Keywords' / 'OG' / 'HUM.dict'
    
    return files_by_dept

def collect_query_files(main_path, dept_to_subs, files_by_dept):
    """Collect query files from OG and CCA directories and organize them by department."""
    # Find all directory paths containing .dict files
    dirs = sorted({p.parent for p in main_path.glob('**/*.dict')})
    
    for dir_path in dirs:
        rel_path = dir_path.relative_to(main_path / 'ri-queries') 
        
        # Process OG queries
        if rel_path == Path('Keywords/OG'):
            process_og_queries(dir_path, dept_to_subs, files_by_dept)
        
        # Process gynecological cancer queries from CCA
        elif rel_path == Path('Keywords/CCA'):
            process_cca_queries(dir_path, dept_to_subs, files_by_dept)
    
    return dirs, files_by_dept

def process_og_queries(dir_path, dept_to_subs, files_by_dept):
    """Process queries from the OG directory."""
    # Get all dict files except those in the skip list
    files_og = sorted({p for p in Path(dir_path).glob('**/*.dict') if p.stem not in SKIP_OG})
    
    for file in files_og:
        with open(file, mode='r') as f:
            query_dict = ast.literal_eval(f.read())
        
        # Assign file to appropriate department and subdivision
        for department, subdivisions in dept_to_subs.items():
            for subdivision in subdivisions:
                if query_dict.get('sub_long') == subdivision:
                    files_by_dept[department][subdivision].add(file)

def process_cca_queries(dir_path, dept_to_subs, files_by_dept):
    """Process gynecological cancer queries from the CCA directory."""
    # Get only the gynecological cancer files we want to include
    files_cca = sorted({p for p in Path(dir_path).glob('**/*.dict') 
                       if p.stem in KEEP_GYNCANCERS})
    
    for file in files_cca:
        with open(file, mode='r') as f:
            query_dict = ast.literal_eval(f.read())
        
        # Assign file to appropriate department and subdivision
        for department, subdivisions in dept_to_subs.items():
            for subdivision in subdivisions:
                if query_dict.get('sub_long') == subdivision:
                    files_by_dept[department][subdivision].add(file)

def print_og_queries(files_by_dept):
    """Print all OG queries, including gynecological cancer queries from CCA."""
    print(f'\n## Obstetrics and Gynaecology')
    
    for department in files_by_dept.keys():
        if department == 'General':
            continue
            
        print(f'\n### {department}')
        
        for subdivision in sorted(files_by_dept.get(department).keys()):
            print(f'\n#### {subdivision}')
            
            for keyword_file in sorted(files_by_dept.get(department).get(subdivision)):
                with open(keyword_file, mode='r') as f:
                    query_dict = ast.literal_eval(f.read())
                
                # Print query title and content
                print_title(query_dict, n=5, project='OG')
                
                # Note if query uses HUMAN filter
                if keyword_file.stem in WITH_HUMAN_FILTER:
                    print('Combined with [HUMAN filter](#filters) for specificity.\n')
                
                # Print PubMed query
                print('_Pubmed query_')
                query_content = get_query(query_dict, query_type='pubmed')
                print_query(query_content)
                
                # Print Scopus query
                print('_Scopus query_')
                query_content = get_query(query_dict, query_type='scopus')
                print_query(query_content)

def print_remaining_queries(dirs, main_path):
    """Print clinical status queries, topic queries, and any other queries found."""
    for dir_path in dirs:
        try:
            rel_path = dir_path.relative_to(main_path / 'ri-queries')
            
            # Process Clinical Status queries
            if rel_path == Path('clinicalStatus'):
                print_clinical_status_queries(dir_path)
            
            # Process Topic queries
            elif rel_path == Path('topics'):
                print_topic_queries(dir_path)
            
            # Skip already processed directories
            elif rel_path in [Path('Keywords/OG'), Path('Keywords/CCA'), 
                             Path('Keywords/KBC'), Path('.')]:
                continue
            
            # Process any other queries found
            else:
                print_other_queries(dir_path)
                
        except ValueError:
            # Skip if directory is not relative to main_path/ri-queries
            continue

def print_clinical_status_queries(dir_path):
    """Print queries from the clinicalStatus directory."""
    print(f'\n## Clinical Status queries')
    files = {p for p in Path(dir_path).glob('**/*.dict') if p.stem not in SKIP_CLINICAL}
    
    for file in files:
        with open(file, mode='r') as f:
            query_dict = ast.literal_eval(f.read())
        
        query_content = get_query(query_dict, query_type='pubmed')
        print_title(query_dict)
        print_query(query_content)

def print_topic_queries(dir_path):
    """Print queries from the topics directory."""
    print(f'\n## Topic queries')
    files = {p for p in Path(dir_path).glob('**/*.dict') if p.stem not in SKIP_TOPICS}
    
    for file in files:
        with open(file, mode='r') as f:
            query_dict = ast.literal_eval(f.read())
        
        query_content = get_query(query_dict, query_type='pubmed')
        print_title(query_dict)
        print_query(query_content)

def print_other_queries(dir_path):
    """Print any other queries found that don't fit the main categories."""
    print(f'\n## Check these queries!')
    files = {p for p in Path(dir_path).glob('**/*.dict')}
    
    for file in files:
        with open(file, mode='r') as f:
            query_dict = ast.literal_eval(f.read())
        
        query_content = get_query(query_dict, query_type='pubmed')
        print_title(query_dict)
        print(file.name)

def print_general_filters_query(files_by_dept):
    """Print the general HUMAN filter query."""
    print('## General queries')
    print('### Filters')
    
    with open(files_by_dept.get('General').get('Filters'), mode='r') as f:
        query_dict = ast.literal_eval(f.read())
    
    print_title(query_dict, n=5, project='OG')
    
    # Print PubMed query
    print('_Pubmed query_')
    query_content = get_query(query_dict, query_type='pubmed')
    print_query(query_content)
    
    # Print Scopus query
    print('_Scopus query_')
    query_content = get_query(query_dict, query_type='scopus')
    print_query(query_content)

# Main execution
# --------------------------------------------------------------------------------------
def main():
    """Main function to generate the queries documentation."""
    # Load hierarchy data
    main_path, hierarchy, departments, subdivisions, dept_to_subs = load_hierarchy_data()
    
    # Initialize file structure
    files_by_dept = initialize_file_structure(departments, hierarchy)
    
    # Collect and organize query files
    dirs, files_by_dept = collect_query_files(main_path, dept_to_subs, files_by_dept)
    
    # Print OG queries (including gynecological cancer queries)
    print_og_queries(files_by_dept)
    
    # Print remaining queries (clinical status, topics, etc.)
    print_remaining_queries(dirs, main_path)
    
    # Print general filters query
    print_general_filters_query(files_by_dept)

# Execute main function
main()
```


# Abbreviations

## Departments

```{python}
#| echo: false

import pandas as pd

# Define the departments dictionary
depts = {
    'CRM': 'Center for Reproductive Medicine',
    'E&G': 'Endometriosis & Gynaecology',
    'GO': 'Gynaecologic Oncology',
    'PDO': 'Prenatal Diagnostics & Obstetrics'
}

# Create a DataFrame from the dictionary
df_depts = pd.DataFrame(list(depts.items()), columns=['Abbreviation', 'Department'])

# Display the table 
df_depts.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # First column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # First column cells
    {'selector': '', 'props': [('max-height', '500px'), 
                            ('overflow-y', 'auto'),
                            ('display', 'block')                            ]},
])
```

## Institutes

Scroll down for more institutes.

```{python}
#| echo: false

import pandas as pd

# Define the institutes dictionary
institutes = {
    'LEUV': 'KU Leuven-University Hospital Leuven',
    'MESK': 'Memorial Sloan Kettering',
    'HAMS': 'Harvard Medical School',
    'DFCI': 'Dana-Farber Cancer Institute',
    'MDAN': 'MD Anderson',
    'JOHO': 'Johns Hopkins',
    'GURO': 'Gustave Roussy',
    'KARO': 'Karolinska',
    'YALE': 'Yale',
    'UCL': 'UCL (London)',
    'VALL': 'Vallebron (Barcelona)',
    'MANC': 'Manchester',
    'CHAR': 'Charite',
    'NKIA': 'NKI-AVL',
    'CCA': 'CCA',
    'AUMC': 'AMC-VUMC',
    'ERMC': 'Erasmus MC',
    'LUMC': 'Leids UMC',
    'MUMC': 'Maastricht UMC',
    'UMCG': 'UMC Groningen',
    'RUMC': 'Radboud UMC',
    'UMCU': 'UMC Utrecht',
    'HUBR': 'Hubrecht',
    'AMS': 'Amsterdam',
    'AMSU': 'AMS-UMCU',
    'BOST': 'Harvard Medical School',
    'TOSK': 'University of Toronto',
    'GOSH': 'UCL (London)',
    'CICH': 'Cincinatti',
    'MAYO': 'Mayo Clinic',
    'VUB': 'Vrije Universiteit Brussel',
    'SKMC': 'Thomas Jefferson University',
    'SJDB': 'Hospital Sant Joan de Deu Barcelona',
    'SGUH': "St George's, University of London",
    'RBWH': 'The University of Queensland',
    'PEN': 'University of Pennsylvania',
    'OSLO': 'Universitetet i Oslo',
    'MON': 'Monash Medical Centre',
    'MIL': 'Universita Studi di Milano',
    'MICH': "University of Michigan, Ann Arbor",
    'KING': "King's College London",
    'HARV': 'Harvard Medical School',
    'GENT': 'Universiteit Gent',
    'EUN': 'University of Massachusetts System',
    'EDIN': 'Edinburgh Medical School',
    'DUKE': 'Duke University',
    'DEX': 'Hospital Universitari Dexeus',
    'COP': 'Copenhagen University Hospital',
    'BIRM': 'University of Birmingham',
    'BARC': 'Universitat de Barcelona',
    'AUCK': 'The University of Auckland',
    'ADEL': 'The University of Adelaide',
    'ABER': 'University of Aberdeen',
    'MELB': 'University of Melbourne',
    'NW': 'Northwestern University'
}

# Create a DataFrame from the dictionary
df_inst = pd.DataFrame(list(institutes.items()), columns=['Abbreviation', 'Institute'])

# Display the table directly with scrollable styling
df_inst.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # First column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # First column cells
         {'selector': '', 'props': [('max-height', '500px'), 
                                ('overflow-y', 'auto'),
                                ('display', 'block'),
                                ]},
    ])
```

## Keywords

Scroll down for more keywords.

```{python}
#| echo: false

import sys
import pandas as pd
import ast
from pathlib import Path

# Collect all query files
main_path = Path().resolve()
query_files = []

# Get all the OG query files from the hierarchy
hierarchy = pd.read_csv(main_path / 'ri-queries' / 'Keywords' / 'OG' / 'keywords_hierarchy.csv')

# 'UT-BL', 'BLD-MENS' are combined in BLD
# 'PL-GEN', 'PL-INS' are combined in PL-PLAC
skip_og = ['ANIM', 'UT-BL', 'BLD-MENS', 'PL-GEN', 'PL-INS', 'SURG-REC', 'SURG-SD']
skip_clin = ['A-LM', 'A-MON', 'A-NM', 'A-REST', 'A-RO', 'A-RRR']
skip_topics = ['QOL']
skip_dicts = skip_og + skip_clin + skip_topics

keep_gyncancers = ['GYN-CER', 'GYN-END', 'GYN-GEN', 'GYN-OVA', 'GYN-VUL']
gyn_cancer_path = main_path / 'ri-queries' / 'Keywords' / 'CCA'


# Collect all .dict files
all_dict_files = list(main_path.glob('**/Keywords/OG/**/*.dict'))
all_dict_files = [p for p in all_dict_files if p.stem not in skip_dicts]
all_dict_files.extend([p for p in main_path.glob('**/Keywords/CCA/**/*.dict') 
                       if any(gc in str(p) for gc in keep_gyncancers)])

# Extract keyword information
keywords_data = []

for file_path in all_dict_files:
    try:
        with open(file_path, 'r') as f:
            query_dict = ast.literal_eval(f.read())
            
        # Determine project and get appropriate keys
        project = 'OG' # if 'OG' in str(file_path) else 'CCA'
               
        # Get long name based on project
        if project == 'OG':
            keyword_long = query_dict.get('long_og', query_dict.get('long', '[NO LONG TITLE]'))
            keyword_abbr = query_dict.get('short_og', query_dict.get('long', '[NO SHORT TITLE]'))
        else:
            keyword_long = query_dict.get('long', '[NO LONG TITLE]')
            keyword_abbr = query_dict.get('short', '[NO SHORT TITLE]')

        keywords_data.append({
            'Abbreviation': keyword_abbr,
            'Keyword': keyword_long
        })
    except Exception as e:
        # Skip files that can't be processed
        continue

# Create a DataFrame
df_keywords = pd.DataFrame(keywords_data)

# Sort by abbreviation
df_keywords = df_keywords.sort_values('Abbreviation')

# Display the table with same styling as institutes table
df_keywords.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # Second column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # Second column cells
    {'selector': '', 'props': [('max-height', '500px'), 
                              ('overflow-y', 'auto'),
                              ('display', 'block'),
                             ]},
])
```