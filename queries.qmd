---
title: Queries and abbreviations
---

# Search Queries

```{python}
#| echo: false
#| output: asis

import ast
import glob
from pathlib import Path
import re
import sys
import pandas as pd
sys.path.append("ri-queries")
from working_with_queries import get_query, print_query, print_title

main_path = Path().resolve()
dirs = sorted( { p.parent for p in main_path.glob('**/*.dict') } )

hierarchy = pd.read_csv(main_path / 'ri-queries' / 'Keywords' / 'OG' / 'keywords_hierarchy.csv')
departments = set(hierarchy['dep_long'].tolist())
subdivisions = set(hierarchy['sub_long'].tolist())

sub_lists = {}
for department in departments:
        # For each department, we create a set of relevant sub_short entries in the dictionary
        sub_lists[department] = set(hierarchy.loc[hierarchy['dep_long'] == department, 'sub_long'].tolist())
        
files_lists = {}
for dept, sub in zip(hierarchy['dep_long'], hierarchy['sub_long']):
    if dept not in files_lists.keys():
        files_lists[dept] = {}
    if sub not in files_lists[dept].keys():
        files_lists[dept][sub] = set()

# print(files_lists)

for dir in dirs:
    if dir.relative_to(main_path / 'ri-queries') == Path('Keywords/OG'):
        files = { p for p in Path(dir).glob('*.dict') }

        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())

            # `sub_lists.keys()` holds the values from `dep_long`
            for department in sub_lists.keys():
                # Each `sub_lists[department]` holds a set of relevant sub_long entries
                for subdivision in sub_lists[department]:
                    if q.get('sub_long') == subdivision:
                        files_lists[department][subdivision].add(file)

for dir in dirs:
    if dir.relative_to(main_path / 'ri-queries') == Path('Keywords/OG'):
        print(f'\n## Obstetrics and Gynaecology')
        for department in files_lists.keys():
            print(f'\n### {department}')
            for subdivision in files_lists.get(department).keys():
                print(f'\n#### {subdivision}')
                for keyword in files_lists.get(department).get(subdivision):
                    with open(keyword, mode='r') as f:
                        q = ast.literal_eval(f.read())
                    
                    print_title(q, n=5, project='OG')
                    print('_Pubmed query_')
                    query_content = get_query(q, query_type='pubmed')
                    print_query(query_content)
                    print('_Scopus query_')
                    query_content = get_query(q, query_type='scopus')
                    print_query(query_content)

    elif dir.relative_to(main_path / 'ri-queries') == Path('clinicalStatus'):
        print(f'\n## Clinical Status queries')
        files = { p for p in Path(dir).glob('**/*.dict') }
        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            query_content = get_query(q, query_type='pubmed')
            print_title(q)
            print_query(query_content)

    elif dir.relative_to(main_path / 'ri-queries') == Path('topics'):
        print(f'\n## Topic queries')
        files = { p for p in Path(dir).glob('**/*.dict') }
        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            query_content = get_query(q, query_type='pubmed')
            print_title(q)
            print_query(query_content)

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/CCA'):
        continue

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/KBC'):
        continue

    elif dir.relative_to(main_path / 'ri-queries') == Path('.'):
        continue

    else:
        print(f'\n## Check these queries!')
```


# Abbreviations

## Departments

## Institutes

## Keywords