---
title: Queries and abbreviations
---

# Search Queries

```{python}
#| echo: false
#| output: asis

import ast
import glob
from pathlib import Path
import re
import sys
import pandas as pd
sys.path.append("ri-queries")
from working_with_queries import get_query, print_query, print_title

skip_og = ['ANIM', 'HUM']
skip_clin = ['A-LM', 'A-MON', 'A-NM', 'A-REST', 'A-RO', 'A-RRR']
skip_topics = ['QOL']
keep_gyncancers = ['GYN-CER', 'GYN-END', 'GYN-GEN', 'GYN-OVA', 'GYN-VUL']
with_HUM_filter = ['ART', 'FERT']

main_path = Path().resolve()
dirs = sorted( { p.parent for p in main_path.glob('**/*.dict') } )

hierarchy = pd.read_csv(main_path / 'ri-queries' / 'Keywords' / 'OG' / 'keywords_hierarchy.csv')
departments = set(hierarchy['dep_long'].tolist())
subdivisions = set(hierarchy['sub_long'].tolist())

gyn_cancer_path = main_path / 'ri-queries' / 'Keywords' / 'CCA'

sub_lists = {}
for department in sorted(departments):
        # For each department, we create a set of relevant sub_short entries in the dictionary
        sub_lists[department] = set(hierarchy.loc[hierarchy['dep_long'] == department, 'sub_long'].tolist())
        
files_lists = {}
for dept, sub in zip(hierarchy['dep_long'], hierarchy['sub_long']):
    if dept not in files_lists.keys():
        files_lists[dept] = {}
    if sub not in files_lists[dept].keys():
        files_lists[dept][sub] = set()

files_lists['General'] = {}
files_lists['General']['Filters'] = main_path / 'ri-queries' / 'Keywords' / 'OG' / 'HUM.dict'

for dir in dirs:
    if dir.relative_to(main_path / 'ri-queries') == Path('Keywords/OG'):
        files_og = sorted({ p for p in Path(dir).glob('**/*.dict') if p.stem not in skip_og })

        for file in files_og:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            
            # `sub_lists.keys()` holds the values from `dep_long`
            for department in sub_lists.keys():
                # Each `sub_lists[department]` holds a set of relevant sub_long entries
                for subdivision in sub_lists[department]:
                    if q.get('sub_long') == subdivision:
                        files_lists[department][subdivision].add(file)

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/CCA'):
        files_cca = sorted({ p for p in Path(dir).glob('**/*.dict') if p.stem in keep_gyncancers })

        for file in files_cca:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())

            # `sub_lists.keys()` holds the values from `dep_long`
            for department in sub_lists.keys():
                # Each `sub_lists[department]` holds a set of relevant sub_long entries
                for subdivision in sub_lists[department]:
                    if q.get('sub_long') == subdivision:
                        files_lists[department][subdivision].add(file)

# Print all the OG queries, including those from the CCA queries that are in keep_gyncancers
print(f'\n## Obstetrics and Gynaecology')
for department in files_lists.keys():
    if department == 'General':
        continue
    print(f'\n### {department}')
    for subdivision in sorted(files_lists.get(department).keys()):
        print(f'\n#### {subdivision}')
        for keyword in sorted(files_lists.get(department).get(subdivision)):
            # print(keyword)
            # print(type(keyword))
            with open(keyword, mode='r') as f:
                q = ast.literal_eval(f.read())
            
            # Determine project based on file path
            project = 'OG'
            if 'CCA' in str(keyword):
                project = 'CCA'
            
            print_title(q, n=5, project=project)
            if keyword.stem in with_HUM_filter:
                print('Combined with [HUMAN](#filters) filter for specificity.\n')

            print('_Pubmed query_')
            query_content = get_query(q, query_type='pubmed')
            print_query(query_content)
            print('_Scopus query_')
            query_content = get_query(q, query_type='scopus')
            print_query(query_content)

for dir in dirs:

    if dir.relative_to(main_path / 'ri-queries') == Path('clinicalStatus'):
        print(f'\n## Clinical Status queries')
        files = { p for p in Path(dir).glob('**/*.dict') if p.stem not in skip_clin }
        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            query_content = get_query(q, query_type='pubmed')
            print_title(q)
            print_query(query_content)

    elif dir.relative_to(main_path / 'ri-queries') == Path('topics'):
        print(f'\n## Topic queries')
        files = { p for p in Path(dir).glob('**/*.dict') if p.stem not in skip_topics }
        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            query_content = get_query(q, query_type='pubmed')
            print_title(q)
            print_query(query_content)

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/OG'):
        # Already processed above with OG queries, so skip here
        continue

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/CCA'):
        # Already processed above with OG queries, so skip here
        continue

    elif dir.relative_to(main_path / 'ri-queries') == Path('Keywords/KBC'):
        continue

    elif dir.relative_to(main_path / 'ri-queries') == Path('.'):
        continue

    else:
        print(f'\n## Check these queries!')
        files = { p for p in Path(dir).glob('**/*.dict') }
        for file in files:
            with open(file, mode='r') as f:
                q = ast.literal_eval(f.read())
            query_content = get_query(q, query_type='pubmed')
            print_title(q)
            print(file.name)

print('## General queries')
print('### Filters')
with open(files_lists.get('General').get('Filters'), mode='r') as f:
    q = ast.literal_eval(f.read())
print_title(q, n=5, project='OG')
print('_Pubmed query_')
query_content = get_query(q, query_type='pubmed')
print_query(query_content)
print('_Scopus query_')
query_content = get_query(q, query_type='scopus')
print_query(query_content)
```


# Abbreviations

## Departments

```{python}
#| echo: false

import pandas as pd

# Define the departments dictionary
depts = {
    'CRM': 'Center for Reproductive Medicine',
    'E&G': 'Endometriosis & Gynaecology',
    'GO': 'Gynaecologic Oncology',
    'PDO': 'Prenatal Diagnostics & Obstetrics'
}

# Create a DataFrame from the dictionary
df_depts = pd.DataFrame(list(depts.items()), columns=['Abbreviation', 'Department'])

# Display the table 
df_depts.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # First column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # First column cells
    {'selector': '', 'props': [('max-height', '500px'), 
                            ('overflow-y', 'auto'),
                            ('display', 'block')                            ]},
])
```

## Institutes

Scroll down for more institutes.

```{python}
#| echo: false

import pandas as pd

# Define the institutes dictionary
institutes = {
    'LEUV': 'KU Leuven-University Hospital Leuven',
    'MESK': 'Memorial Sloan Kettering',
    'HAMS': 'Harvard Medical School',
    'DFCI': 'Dana-Farber Cancer Institute',
    'MDAN': 'MD Anderson',
    'JOHO': 'Johns Hopkins',
    'GURO': 'Gustave Roussy',
    'KARO': 'Karolinska',
    'YALE': 'Yale',
    'UCL': 'UCL (London)',
    'VALL': 'Vallebron (Barcelona)',
    'MANC': 'Manchester',
    'CHAR': 'Charite',
    'NKIA': 'NKI-AVL',
    'CCA': 'CCA',
    'AUMC': 'AMC-VUMC',
    'ERMC': 'Erasmus MC',
    'LUMC': 'Leids UMC',
    'MUMC': 'Maastricht UMC',
    'UMCG': 'UMC Groningen',
    'RUMC': 'Radboud UMC',
    'UMCU': 'UMC Utrecht',
    'HUBR': 'Hubrecht',
    'AMS': 'Amsterdam',
    'AMSU': 'AMS-UMCU',
    'BOST': 'Harvard Medical School',
    'TOSK': 'University of Toronto',
    'GOSH': 'UCL (London)',
    'CICH': 'Cincinatti',
    'MAYO': 'Mayo Clinic',
    'VUB': 'Vrije Universiteit Brussel',
    'SKMC': 'Thomas Jefferson University',
    'SJDB': 'Hospital Sant Joan de Deu Barcelona',
    'SGUH': "St George's, University of London",
    'RBWH': 'The University of Queensland',
    'PEN': 'University of Pennsylvania',
    'OSLO': 'Universitetet i Oslo',
    'MON': 'Monash Medical Centre',
    'MIL': 'Universita Studi di Milano',
    'MICH': "University of Michigan, Ann Arbor",
    'KING': "King's College London",
    'HARV': 'Harvard Medical School',
    'GENT': 'Universiteit Gent',
    'EUN': 'University of Massachusetts System',
    'EDIN': 'Edinburgh Medical School',
    'DUKE': 'Duke University',
    'DEX': 'Hospital Universitari Dexeus',
    'COP': 'Copenhagen University Hospital',
    'BIRM': 'University of Birmingham',
    'BARC': 'Universitat de Barcelona',
    'AUCK': 'The University of Auckland',
    'ADEL': 'The University of Adelaide',
    'ABER': 'University of Aberdeen',
    'MELB': 'University of Melbourne',
    'NW': 'Northwestern University'
}

# Create a DataFrame from the dictionary
df_inst = pd.DataFrame(list(institutes.items()), columns=['Abbreviation', 'Institute'])

# Display the table directly with scrollable styling
df_inst.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # First column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # First column cells
         {'selector': '', 'props': [('max-height', '500px'), 
                                ('overflow-y', 'auto'),
                                ('display', 'block'),
                                ]},
    ])
```

## Keywords

Scroll down for more keywords.

```{python}
#| echo: false

import sys
import pandas as pd
import ast
from pathlib import Path

# Collect all query files
main_path = Path().resolve()
query_files = []

# Get all the OG query files from the hierarchy
hierarchy = pd.read_csv(main_path / 'ri-queries' / 'Keywords' / 'OG' / 'keywords_hierarchy.csv')

skip_og = ['ANIM']
skip_clin = ['A-LM', 'A-MON', 'A-NM', 'A-REST', 'A-RO', 'A-RRR']
skip_topics = ['QOL']
skip_dicts = skip_og + skip_clin + skip_topics

keep_gyncancers = ['GYN-CER', 'GYN-END', 'GYN-GEN', 'GYN-OVA', 'GYN-VUL']
gyn_cancer_path = main_path / 'ri-queries' / 'Keywords' / 'CCA'


# Collect all .dict files
all_dict_files = list(main_path.glob('**/Keywords/OG/**/*.dict'))
all_dict_files = [p for p in all_dict_files if p.stem not in skip_dicts]
all_dict_files.extend([p for p in main_path.glob('**/Keywords/CCA/**/*.dict') 
                       if any(gc in str(p) for gc in keep_gyncancers)])

# Extract keyword information
keywords_data = []

for file_path in all_dict_files:
    try:
        with open(file_path, 'r') as f:
            query_dict = ast.literal_eval(f.read())
            
        # Determine project and get appropriate keys
        project = 'OG' if 'OG' in str(file_path) else 'CCA'
               
        # Get long name based on project
        if project == 'OG':
            keyword_long = query_dict.get('long_og', query_dict.get('long', '[NO LONG TITLE]'))
            keyword_abbr = query_dict.get('short_og', query_dict.get('long', '[NO SHORT TITLE]'))
        else:
            keyword_long = query_dict.get('long', '[NO LONG TITLE]')
            keyword_abbr = query_dict.get('short', '[NO SHORT TITLE]')

        keywords_data.append({
            'Abbreviation': keyword_abbr,
            'Keyword': keyword_long
        })
    except Exception as e:
        # Skip files that can't be processed
        continue

# Create a DataFrame
df_keywords = pd.DataFrame(keywords_data)

# Sort by abbreviation
df_keywords = df_keywords.sort_values('Abbreviation')

# Display the table with same styling as institutes table
df_keywords.style.hide().set_properties(**{'text-align': 'left'}).set_table_styles([
    {'selector': 'th:nth-child(1)', 'props': [('width', '150px')]},  # First column header
    {'selector': 'td:nth-child(1)', 'props': [('width', '150px')]},  # First column cells
    {'selector': 'th:nth-child(2)', 'props': [('width', '350px')]},  # Second column header
    {'selector': 'td:nth-child(2)', 'props': [('width', '350px')]},  # Second column cells
    {'selector': '', 'props': [('max-height', '500px'), 
                              ('overflow-y', 'auto'),
                              ('display', 'block'),
                             ]},
])
```